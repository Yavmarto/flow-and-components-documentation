---
title: Vaadin mixin interfaces
order: 8
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]
= Vaadin mixin interfaces

A mixin refers to a defined amount of functionality which can be added to a class.

Before Java 8, interfaces could only have abstract methods.
In Java 8 developers has the possibility to add default methods to interfaces.

Vaadin uses this concept to create a common set of functionalities that are present in most web components.
Providing a common API and default functionality for Vaadin components.

Amount the most important mixins are:

* HasSize
* HasComponents
* HasStyle

These predefined mixins allows developers to add functionalities to their components saving time and effort, just with implementing those interfaces.

[NOTE]
There are many more mixins. Other important mixins are: `HasEnabled`, `HasElement`, `HasDataProvider<T>`, `HasValidation`, `HasItems`, `HasOrderedComponents`, `HasText`, `Focusable<T>`.


== HasSize

Any component implementing this interface supports setting the size of the
component using {@link #setWidth(String)} and {@link #setHeight(String)}

The methods that are implemented in `HasSize` interface are:

* void setWidth(String width)
* String getWidth()
* void setHeight(String height)
* String getHeight()
* void setSizeFull()
* void setSizeUndefined()

== HasComponents

A component to which the user can add and remove child components.

The methods that are implemented in `HasComponents` interface are:

* void add(Component... components)
* void remove(Component... components)
* void removeAll()

== HasStyle

Represents a component which has class attribute and inline styles.

The methods that are implemented in `HasStyle` interface are:

* void addClassName(String className)
* boolean removeClassName(String className)
* void setClassName(String className)
* String getClassName()
* ClassList getClassNames()
* void setClassName(String className, boolean set)
* boolean hasClassName(String className)
* Style getStyle()
* void addClassNames(String... classNames)
* void removeClassNames(String... classNames)

== Example

This example describes how a custom component can use the Vaadin mixin interfaces to acquire new functionalities.

[source,java]
----
public class Tooltip extends Component implements HasComponents, HasStyle {

}
----

[source,html]
----
<dom-module id="incubator-tooltip">
  <template>
    <div part="content" theme="dark">
      <slot></slot>
    </div>
  </template>
</dom-module>
----

[NOTE]
The component that implements HasComponents needs to have an `slot`.

Just adding the interface it will add components to it:

[source,java]
----
Tooltip tooltip = new Tooltip();

tooltip.add(new H5("Tooltip"));
tooltip.add(new Paragraph("I am a paragraph"));
----


== Why is it recommended to use them?

Without Vaadin mixins it would be necessary to access the componentÂ´s api like this: `getElement().getStyle().set("width", "300px")`.

On the other hand, using the already implemented functionality defined in the `HasSize` mixin is much easier: `setWidth("300px)`.

[TIP]
Do not reinvent the wheel.